{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/services/random-user.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/material/progress-spinner\";\nfunction ContactsPageComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"mat-spinner\");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c0 = function (a0, a1) {\n  return {\n    data: a0,\n    filtro: a1\n  };\n};\nfunction ContactsPageComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 5)(2, \"h6\", 6);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function ContactsPageComponent_div_3_Template_button_click_4_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const contacto_r5 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.volverHome(contacto_r5));\n    });\n    i0.ɵɵtext(5, \"Seleccionar como amigo Invisible\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const contacto_r5 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"routerLink\", contacto_r5.id.name);\n    i0.ɵɵproperty(\"state\", i0.ɵɵpureFunction2(4, _c0, contacto_r5, ctx_r1.filtroSexo));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\" \", contacto_r5.name.first, \" \", contacto_r5.name.last, \" \");\n  }\n}\nfunction ContactsPageComponent_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Mostrando lista filtrada por: \\\"\", ctx_r2.filtroSexo, \"\\\"\");\n  }\n}\nfunction ContactsPageComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \"Mostrando lista de contactos completa\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class ContactsPageComponent {\n  constructor(router, route,\n  //private contactService: ContactsService,\n  randomUserService) {\n    this.router = router;\n    this.route = route;\n    this.randomUserService = randomUserService;\n    this.cargando = true;\n    this.filtroSexo = 'todos';\n    //listaContactos: IContacto[]=[];\n    this.listaRandomContacts = [];\n  }\n  ngOnInit() {\n    //Obtener los Query Params\n    this.route.queryParams.subscribe(params => {\n      console.log('QueryParams:', params.sexo);\n      if (params.sexo) {\n        this.filtroSexo = params.sexo;\n        if (params.sexo === 'female' || params.sexo === 'male') {\n          //Implementación para obtener la lista de contactos aleatoria\n          this.randomUserService.obtenerRandomContacts(10, params.sexo).subscribe({\n            next: response => {\n              console.log(response), response.results.forEach((randomContact, index) => {\n                this.listaRandomContacts.push(randomContact);\n              });\n              console.log(this.listaRandomContacts);\n              this.cargando = false;\n            },\n            error: error => console.error(`${error}`),\n            complete: () => console.info('Petición de random contacts terminada')\n          });\n        } else {\n          //Implementación para obtener la lista de contactos aleatoria\n          this.randomUserService.obtenerRandomContacts(10).subscribe({\n            next: response => {\n              console.log(response), response.results.forEach((randomContact, index) => {\n                this.listaRandomContacts.push(randomContact);\n              });\n              console.log(this.listaRandomContacts);\n            },\n            error: error => console.error(`${error}`),\n            complete: () => console.info('Petición de random contacts terminada')\n          });\n        }\n        //Obtener lista de contactos\n        /*this.contactService.obtenerContactos(this.filtroSexo).then(\r\n        (lista)=> this.listaContactos = lista)\r\n        .catch((error)=> console.error(`Ha habido un error al obtener los contactos: ${error}`))\r\n         .finally(()=> console.info('Petición de contactos terminada'))\r\n        */\n      }\n    });\n  }\n  //Ejemplo de paso de información entre componentes del ESTADO\n  volverHome(contacto) {\n    let navigationExtras = {\n      state: {\n        data: contacto\n      }\n    };\n    this.router.navigate(['/dashboard'], navigationExtras);\n  }\n}\nContactsPageComponent.ɵfac = function ContactsPageComponent_Factory(t) {\n  return new (t || ContactsPageComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.RandomUserService));\n};\nContactsPageComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ContactsPageComponent,\n  selectors: [[\"app-contacts-page\"]],\n  decls: 9,\n  vars: 4,\n  consts: [[4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [4, \"ngIf\", \"ngIfElse\"], [\"completo\", \"\"], [\"routerLink\", \"/dashboard\"], [3, \"routerLink\", \"state\"], [1, \"contacto\"], [3, \"click\"]],\n  template: function ContactsPageComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\");\n      i0.ɵɵtext(1, \"Tus contactos\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(2, ContactsPageComponent_div_2_Template, 2, 0, \"div\", 0);\n      i0.ɵɵtemplate(3, ContactsPageComponent_div_3_Template, 6, 7, \"div\", 1);\n      i0.ɵɵtemplate(4, ContactsPageComponent_ng_container_4_Template, 3, 1, \"ng-container\", 2);\n      i0.ɵɵtemplate(5, ContactsPageComponent_ng_template_5_Template, 2, 0, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelementStart(7, \"a\", 4);\n      i0.ɵɵtext(8, \"Volver\");\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      const _r3 = i0.ɵɵreference(6);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.listaRandomContacts.length == 0);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.listaRandomContacts);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.filtroSexo == \"female\" || ctx.filtroSexo == \"male\")(\"ngIfElse\", _r3);\n    }\n  },\n  dependencies: [i3.NgForOf, i3.NgIf, i1.RouterLink, i4.MatProgressSpinner],\n  styles: [\".contacto[_ngcontent-%COMP%] {\\n  font-size: large;\\n}\\n\\n.contacto[_ngcontent-%COMP%]:hover {\\n  cursor: pointer;\\n  color: tomato;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFnZXMvY29udGFjdHMtcGFnZS9jb250YWN0cy1wYWdlLmNvbXBvbmVudC5zY3NzIiwid2VicGFjazovLy4vLi4vLi4vQW5ndWxhciUyMEludGVybWVkaW8vbmdSb3V0aW5nL3NyYy9hcHAvcGFnZXMvY29udGFjdHMtcGFnZS9jb250YWN0cy1wYWdlLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsZ0JBQUE7QUNDRjs7QURFQTtFQUNFLGVBQUE7RUFDQSxhQUFBO0FDQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIuY29udGFjdG97XG4gIGZvbnQtc2l6ZTogbGFyZ2U7XG59XG5cbi5jb250YWN0bzpob3ZlcntcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBjb2xvcjogdG9tYXRvO1xufVxuIiwiLmNvbnRhY3RvIHtcbiAgZm9udC1zaXplOiBsYXJnZTtcbn1cblxuLmNvbnRhY3RvOmhvdmVyIHtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBjb2xvcjogdG9tYXRvO1xufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":";;;;;;;IAEAA,2BAA2C;IACzCA,8BAA2B;IAC7BA,iBAAM;;;;;;;;;;;;IAGNA,2BAA+D;IAGzDA,YAED;IAAAA,iBAAK;IACNA,iCAAuC;IAA/BA;MAAA;MAAA;MAAA;MAAA,OAASA,6CAAoB;IAAA,EAAC;IAACA,gDAAgC;IAAAA,iBAAS;;;;;IAL7EA,eAAiC;IAAjCA,2DAAiC;IAACA,kFAA8C;IAEjFA,eAED;IAFCA,mFAED;;;;;IAKLA,6BAAiF;IAC/EA,yBAAG;IAAAA,YAA8C;IAAAA,iBAAI;IACvDA,0BAAe;;;;IADVA,eAA8C;IAA9CA,kFAA8C;;;;;IAIjDA,yBAAG;IAAAA,qDAAqC;IAAAA,iBAAI;;;ACV9C,OAAM,MAAOC,qBAAqB;EAOhCC,YAAoBC,MAAc,EACdC,KAAqB;EAC7B;EACQC,iBAAoC;IAHpC,WAAM,GAANF,MAAM;IACN,UAAK,GAALC,KAAK;IAEL,sBAAiB,GAAjBC,iBAAiB;IARrC,aAAQ,GAAW,IAAI;IACvB,eAAU,GAAU,OAAO;IAC3B;IACA,wBAAmB,GAAmB,EAAE;EAOxC;EAEAC,QAAQ;IAIN;IACA,IAAI,CAACF,KAAK,CAACG,WAAW,CAACC,SAAS,CAAEC,MAAW,IAAI;MAC/CC,OAAO,CAACC,GAAG,CAAC,cAAc,EAACF,MAAM,CAACG,IAAI,CAAC;MACvC,IAAGH,MAAM,CAACG,IAAI,EAAC;QACX,IAAI,CAACC,UAAU,GAAEJ,MAAM,CAACG,IAAI;QAE7B,IAAGH,MAAM,CAACG,IAAI,KAAI,QAAQ,IAAGH,MAAM,CAACG,IAAI,KAAG,MAAM,EAAC;UAEnD;UACE,IAAI,CAACP,iBAAiB,CAACS,qBAAqB,CAAC,EAAE,EAAEL,MAAM,CAACG,IAAI,CAAC,CAACJ,SAAS,CACrE;YACEO,IAAI,EAAGC,QAAiB,IAAG;cACzBN,OAAO,CAACC,GAAG,CAACK,QAAQ,CAAC,EACrBA,QAAQ,CAACC,OAAO,CAACC,OAAO,CAAC,CAACC,aAA6B,EAAEC,KAAa,KAAI;gBACxE,IAAI,CAACC,mBAAmB,CAACC,IAAI,CAACH,aAAa,CAAC;cAC9C,CAAC,CAAC;cACFT,OAAO,CAACC,GAAG,CAAC,IAAI,CAACU,mBAAmB,CAAC;cACrC,IAAI,CAACE,QAAQ,GAAE,KAAK;YACtB,CAAC;YACDC,KAAK,EAAGA,KAAK,IAAGd,OAAO,CAACc,KAAK,CAAC,GAAGA,KAAK,EAAE,CAAC;YACzCC,QAAQ,EAAE,MAAKf,OAAO,CAACgB,IAAI,CAAC,uCAAuC;WACpE,CACF;SAGJ,MAAI;UACH;UACA,IAAI,CAACrB,iBAAiB,CAACS,qBAAqB,CAAC,EAAE,CAAC,CAACN,SAAS,CACxD;YACEO,IAAI,EAAGC,QAAiB,IAAG;cACzBN,OAAO,CAACC,GAAG,CAACK,QAAQ,CAAC,EACrBA,QAAQ,CAACC,OAAO,CAACC,OAAO,CAAC,CAACC,aAA6B,EAAEC,KAAa,KAAI;gBACxE,IAAI,CAACC,mBAAmB,CAACC,IAAI,CAACH,aAAa,CAAC;cAC9C,CAAC,CAAC;cACFT,OAAO,CAACC,GAAG,CAAC,IAAI,CAACU,mBAAmB,CAAC;YACvC,CAAC;YACDG,KAAK,EAAGA,KAAK,IAAGd,OAAO,CAACc,KAAK,CAAC,GAAGA,KAAK,EAAE,CAAC;YACzCC,QAAQ,EAAE,MAAKf,OAAO,CAACgB,IAAI,CAAC,uCAAuC;WACpE,CACF;;QAEH;QACK;;;;;;IAOP,CAAC,CAAC;EACJ;EACA;EACAC,UAAU,CAACC,QAAwB;IAEjC,IAAIC,gBAAgB,GAAmB;MACrCC,KAAK,EAAE;QACLC,IAAI,EAAEH;;KAGT;IACD,IAAI,CAACzB,MAAM,CAAC6B,QAAQ,CAAC,CAAC,YAAY,CAAC,EAAEH,gBAAgB,CAAC;EACxD;;AA/EW5B,qBAAqB;mBAArBA,qBAAqB;AAAA;AAArBA,qBAAqB;QAArBA,qBAAqB;EAAAgC;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDZlCrC,0BAAI;MAAAA,6BAAa;MAAAA,iBAAK;MAEtBA,sEAEM;MAGNA,sEAQM;MAENA,wFAEe;MAEfA,uHAEc;MAEdA,4BAA2B;MAAAA,sBAAM;MAAAA,iBAAI;;;;MAvB/BA,eAAmC;MAAnCA,0DAAmC;MAKfA,eAAwB;MAAxBA,iDAAwB;MAUnCA,eAAmD;MAAnDA,6EAAmD","names":["i0","ContactsPageComponent","constructor","router","route","randomUserService","ngOnInit","queryParams","subscribe","params","console","log","sexo","filtroSexo","obtenerRandomContacts","next","response","results","forEach","randomContact","index","listaRandomContacts","push","cargando","error","complete","info","volverHome","contacto","navigationExtras","state","data","navigate","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\josan\\Desktop\\Angular Intermedio\\ngRouting\\src\\app\\pages\\contacts-page\\contacts-page.component.html","C:\\Users\\josan\\Desktop\\Angular Intermedio\\ngRouting\\src\\app\\pages\\contacts-page\\contacts-page.component.ts"],"sourcesContent":["<h1>Tus contactos</h1>\r\n\r\n<div *ngIf=\"listaRandomContacts.length==0\"> \r\n  <mat-spinner></mat-spinner>\r\n</div>\r\n<!-- Listar los contactos y poder navegar al pinchar en uno de ellos al detalle -->\r\n\r\n<div *ngFor=\"let contacto of listaRandomContacts; let i=index\">\r\n  <div routerLink=\"{{contacto.id.name}}\" [state]=\"{data: contacto, filtro: filtroSexo}\">  <!--  También se puede incorporar detras de id}}\" ....-->\r\n    <h6 class=\"contacto\">\r\n      {{contacto.name.first}}\r\n      {{contacto.name.last}}\r\n     </h6>\r\n    <button (click)=\"volverHome(contacto)\">Seleccionar como amigo Invisible</button>\r\n  </div>\r\n</div>\r\n\r\n<ng-container *ngIf=\"filtroSexo == 'female' || filtroSexo=='male';else completo\">\r\n  <p>Mostrando lista filtrada por: \"{{filtroSexo}}\"</p>\r\n</ng-container>\r\n\r\n<ng-template #completo>\r\n  <p>Mostrando lista de contactos completa</p>\r\n</ng-template>\r\n\r\n<a routerLink=\"/dashboard\">Volver</a>\r\n","import { NavigationExtras, Router, ActivatedRoute } from '@angular/router';\r\nimport { IContacto } from './../../models/contact.interface';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { ContactsService } from 'src/app/services/contacts.service';\r\nimport { RandomUserService } from 'src/app/services/random-user.service';\r\nimport { IRandomContact, Results } from 'src/app/models/randomuser';\r\n\r\n@Component({\r\n  selector: 'app-contacts-page',\r\n  templateUrl: './contacts-page.component.html',\r\n  styleUrls: ['./contacts-page.component.scss']\r\n})\r\nexport class ContactsPageComponent implements OnInit{\r\n\r\n  cargando: boolean= true;\r\n  filtroSexo: string= 'todos';\r\n  //listaContactos: IContacto[]=[];\r\n  listaRandomContacts: IRandomContact[]=[];\r\n\r\n  constructor(private router: Router,\r\n              private route: ActivatedRoute,\r\n              //private contactService: ContactsService,\r\n              private randomUserService: RandomUserService){\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n\r\n\r\n    //Obtener los Query Params\r\n    this.route.queryParams.subscribe((params: any) =>{\r\n      console.log('QueryParams:',params.sexo)\r\n      if(params.sexo){\r\n          this.filtroSexo= params.sexo\r\n\r\n         if(params.sexo=== 'female'|| params.sexo==='male'){\r\n\r\n        //Implementación para obtener la lista de contactos aleatoria\r\n          this.randomUserService.obtenerRandomContacts(10, params.sexo).subscribe(\r\n            {\r\n              next: (response: Results)=>{\r\n                console.log(response),\r\n                response.results.forEach((randomContact: IRandomContact, index: number) =>{\r\n                  this.listaRandomContacts.push(randomContact);\r\n                })\r\n                console.log(this.listaRandomContacts);\r\n                this.cargando= false;\r\n              },\r\n              error: (error)=>console.error(`${error}`),\r\n              complete: () =>console.info('Petición de random contacts terminada')\r\n            }\r\n          );\r\n\r\n\r\n      }else{\r\n        //Implementación para obtener la lista de contactos aleatoria\r\n        this.randomUserService.obtenerRandomContacts(10).subscribe(\r\n          {\r\n            next: (response: Results)=>{\r\n              console.log(response),\r\n              response.results.forEach((randomContact: IRandomContact, index: number) =>{\r\n                this.listaRandomContacts.push(randomContact);\r\n              })\r\n              console.log(this.listaRandomContacts);\r\n            },\r\n            error: (error)=>console.error(`${error}`),\r\n            complete: () =>console.info('Petición de random contacts terminada')\r\n          }\r\n        );\r\n      }\r\n      //Obtener lista de contactos\r\n           /*this.contactService.obtenerContactos(this.filtroSexo).then(\r\n           (lista)=> this.listaContactos = lista)\r\n           .catch((error)=> console.error(`Ha habido un error al obtener los contactos: ${error}`))\r\n            .finally(()=> console.info('Petición de contactos terminada'))\r\n          */\r\n\r\n     }\r\n    });\r\n  }\r\n  //Ejemplo de paso de información entre componentes del ESTADO\r\n  volverHome(contacto: IRandomContact){\r\n\r\n    let navigationExtras: NavigationExtras={\r\n      state: {\r\n        data: contacto\r\n      }\r\n\r\n    }\r\n    this.router.navigate(['/dashboard'], navigationExtras)\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}