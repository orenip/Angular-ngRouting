{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { catchError, retry, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class RandomUserService {\n  constructor(http) {\n    this.http = http;\n  }\n  handleError(error) {\n    if (error.status === 0) {\n      console.error(`Ha ocurrido un error: ${error.error}`);\n    } else {\n      console.error(`Error en el backend: ${error.status}. El error es: ${error.error} `);\n    }\n    return throwError(() => new Error('Error rn la petición de contacto aleatorio'));\n  }\n  obtenerRandomContact() {\n    return this.http.get('https://randomuser.me/api').pipe(retry(2),\n    //Nº de reintentos de peticiones\n    catchError(this.handleError) //sacamos error se algo falla\n    );\n  }\n\n  obtenerRandomContacts(n) {\n    const params = new HttpParams().set(\"results\", n);\n    return this.http.get('https://randomuser.me/api', {\n      params: params\n    }).pipe(retry(2),\n    //Nº de reintentos de peticiones\n    catchError(this.handleError) //sacamos error se algo falla\n    );\n  }\n\n  obtenerRandomContactsPorGenero(sexo) {\n    const params = new HttpParams().set(\"results\", sexo);\n    return this.http.get('https://randomuser.me/api', {\n      params: params\n    }).pipe(retry(2),\n    //Nº de reintentos de peticiones\n    catchError(this.handleError) //sacamos error se algo falla\n    );\n  }\n}\n\nRandomUserService.ɵfac = function RandomUserService_Factory(t) {\n  return new (t || RandomUserService)(i0.ɵɵinject(i1.HttpClient));\n};\nRandomUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RandomUserService,\n  factory: RandomUserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAwCA,UAAU,QAAQ,sBAAsB;AAEhF,SAASC,UAAU,EAAEC,KAAK,EAAEC,UAAU,QAAQ,MAAM;;;AAOpD,OAAM,MAAOC,iBAAiB;EAE5BC,YAAqBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAgB;EAEzCC,WAAW,CAACC,KAAwB;IAClC,IAAGA,KAAK,CAACC,MAAM,KAAG,CAAC,EAAC;MAClBC,OAAO,CAACF,KAAK,CAAC,yBAAyBA,KAAK,CAACA,KAAK,EAAE,CAAC;KACtD,MAAI;MACHE,OAAO,CAACF,KAAK,CAAC,wBAAwBA,KAAK,CAACC,MAAM,kBAAkBD,KAAK,CAACA,KAAK,GAAG,CAAC;;IAGrF,OAAOL,UAAU,CAAC,MAAK,IAAIQ,KAAK,CAAC,4CAA4C,CAAC,CAE7E;EACH;EAEAC,oBAAoB;IAElB,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAAU,2BAA2B,CAAC,CAACC,IAAI,CAC7DZ,KAAK,CAAC,CAAC,CAAC;IAAE;IACVD,UAAU,CAAC,IAAI,CAACM,WAAW,CAAC,CAAC;IAAA,CAC9B;EACH;;EAEAQ,qBAAqB,CAACC,CAAS;IAC7B,MAAMC,MAAM,GAAe,IAAIjB,UAAU,EAAE,CAACkB,GAAG,CAAC,SAAS,EAACF,CAAC,CAAC;IAE5D,OAAO,IAAI,CAACV,IAAI,CAACO,GAAG,CAAU,2BAA2B,EAAE;MAACI,MAAM,EAAEA;IAAM,CAAC,CAAC,CAACH,IAAI,CAC/EZ,KAAK,CAAC,CAAC,CAAC;IAAE;IACVD,UAAU,CAAC,IAAI,CAACM,WAAW,CAAC,CAAC;IAAA,CAC9B;EAGH;;EAEAY,8BAA8B,CAACC,IAAY;IACzC,MAAMH,MAAM,GAAe,IAAIjB,UAAU,EAAE,CAACkB,GAAG,CAAC,SAAS,EAACE,IAAI,CAAC;IAE/D,OAAO,IAAI,CAACd,IAAI,CAACO,GAAG,CAAU,2BAA2B,EAAE;MAACI,MAAM,EAAEA;IAAM,CAAC,CAAC,CAACH,IAAI,CAC/EZ,KAAK,CAAC,CAAC,CAAC;IAAE;IACVD,UAAU,CAAC,IAAI,CAACM,WAAW,CAAC,CAAC;IAAA,CAC9B;EAEH;;;AA3CWH,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;SAAjBA,iBAAiB;EAAAiB,SAAjBjB,iBAAiB;EAAAkB,YAFhB;AAAM","names":["HttpParams","catchError","retry","throwError","RandomUserService","constructor","http","handleError","error","status","console","Error","obtenerRandomContact","get","pipe","obtenerRandomContacts","n","params","set","obtenerRandomContactsPorGenero","sexo","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\josan\\Desktop\\Angular Intermedio\\ngRouting\\src\\app\\services\\random-user.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { catchError, retry, throwError } from 'rxjs';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { IRandomContact, Results } from '../models/randomuser';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RandomUserService {\n\n  constructor( private http: HttpClient) { }\n\n  handleError(error: HttpErrorResponse){\n    if(error.status===0){\n      console.error(`Ha ocurrido un error: ${error.error}`)\n    }else{\n      console.error(`Error en el backend: ${error.status}. El error es: ${error.error} `)\n    }\n\n    return throwError(()=> new Error('Error rn la petición de contacto aleatorio')\n\n    )\n  }\n\n  obtenerRandomContact(): Observable<Results>{\n\n    return this.http.get<Results>('https://randomuser.me/api').pipe(\n      retry(2), //Nº de reintentos de peticiones\n      catchError(this.handleError) //sacamos error se algo falla\n    );\n  }\n\n  obtenerRandomContacts(n: number): Observable<Results>{\n    const params: HttpParams = new HttpParams().set(\"results\",n);\n\n    return this.http.get<Results>('https://randomuser.me/api', {params: params}).pipe(\n      retry(2), //Nº de reintentos de peticiones\n      catchError(this.handleError) //sacamos error se algo falla\n    );\n\n\n  }\n\n  obtenerRandomContactsPorGenero(sexo: string): Observable<Results>{\n    const params: HttpParams = new HttpParams().set(\"results\",sexo);\n\n    return this.http.get<Results>('https://randomuser.me/api', {params: params}).pipe(\n      retry(2), //Nº de reintentos de peticiones\n      catchError(this.handleError) //sacamos error se algo falla\n    );\n\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}