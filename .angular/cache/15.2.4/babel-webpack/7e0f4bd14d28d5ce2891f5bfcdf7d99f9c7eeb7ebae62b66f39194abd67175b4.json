{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/services/random-user.service\";\nimport * as i3 from \"@angular/common\";\nconst _c0 = function (a0, a1) {\n  return {\n    data: a0,\n    filtro: a1\n  };\n};\nfunction ContactsPageComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 4)(2, \"h6\", 5);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function ContactsPageComponent_div_2_Template_button_click_4_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const contacto_r4 = restoredCtx.$implicit;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.volverHome(contacto_r4));\n    });\n    i0.ɵɵtext(5, \"Seleccionar como amigo Invisible\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const contacto_r4 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"routerLink\", contacto_r4.id);\n    i0.ɵɵproperty(\"state\", i0.ɵɵpureFunction2(3, _c0, contacto_r4, ctx_r0.filtroSexo));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", contacto_r4.nombre, \" \");\n  }\n}\nfunction ContactsPageComponent_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Mostrando lista filtrada por: \\\"\", ctx_r1.filtroSexo, \"\\\"\");\n  }\n}\nfunction ContactsPageComponent_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \"Mostrando lista de contactos completa\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class ContactsPageComponent {\n  constructor(router, route,\n  //private contactService: ContactsService,\n  randomUserService) {\n    this.router = router;\n    this.route = route;\n    this.randomUserService = randomUserService;\n    this.filtroSexo = 'todos';\n    //listaContactos: IContacto[]=[];\n    this.listaRandomContacts = [];\n  }\n  ngOnInit() {\n    //Obtener los Query Params\n    this.route.queryParams.subscribe(params => {\n      console.log('QueryParams:', params.sexo);\n      if (params.sexo) {\n        this.filtroSexo = params.sexo;\n      }\n      //Obtener lista de contactos\n      /*this.contactService.obtenerContactos(this.filtroSexo).then(\r\n      (lista)=> this.listaContactos = lista)\r\n      .catch((error)=> console.error(`Ha habido un error al obtener los contactos: ${error}`))\r\n       .finally(()=> console.info('Petición de contactos terminada'))\r\n      */\n      //Implementación para obtener la lista de contactos aleatoria\n      this.randomUserService.obtenerRandomContacts(10).subscribe({\n        next: response => {\n          console.log(response), response.results.forEach((randomContact, index) => {\n            this.listaRandomContacts.push(randomContact);\n          });\n          console.log(this.listaRandomContacts);\n        },\n        error: error => console.error(`${error}`),\n        complete: () => console.info('Petición de random contacts terminada')\n      });\n    });\n  }\n  //Ejemplo de paso de información entre componentes del ESTADO\n  volverHome(contacto) {\n    let navigationExtras = {\n      state: {\n        data: contacto\n      }\n    };\n    this.router.navigate(['/home'], navigationExtras);\n  }\n}\nContactsPageComponent.ɵfac = function ContactsPageComponent_Factory(t) {\n  return new (t || ContactsPageComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.RandomUserService));\n};\nContactsPageComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ContactsPageComponent,\n  selectors: [[\"app-contacts-page\"]],\n  decls: 8,\n  vars: 3,\n  consts: [[4, \"ngFor\", \"ngForOf\"], [4, \"ngIf\", \"ngIfElse\"], [\"completo\", \"\"], [\"routerLink\", \"/home\"], [3, \"routerLink\", \"state\"], [1, \"contacto\"], [3, \"click\"]],\n  template: function ContactsPageComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\");\n      i0.ɵɵtext(1, \"Tus contactos\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(2, ContactsPageComponent_div_2_Template, 6, 6, \"div\", 0);\n      i0.ɵɵtemplate(3, ContactsPageComponent_ng_container_3_Template, 3, 1, \"ng-container\", 1);\n      i0.ɵɵtemplate(4, ContactsPageComponent_ng_template_4_Template, 2, 0, \"ng-template\", null, 2, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelementStart(6, \"a\", 3);\n      i0.ɵɵtext(7, \"Volver\");\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      const _r2 = i0.ɵɵreference(5);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.listaContactos);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.filtroSexo == \"mujer\" || ctx.filtroSexo == \"hombre\")(\"ngIfElse\", _r2);\n    }\n  },\n  dependencies: [i3.NgForOf, i3.NgIf, i1.RouterLink],\n  styles: [\".contacto[_ngcontent-%COMP%] {\\n  font-size: large;\\n}\\n\\n.contacto[_ngcontent-%COMP%]:hover {\\n  cursor: pointer;\\n  color: tomato;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFnZXMvY29udGFjdHMtcGFnZS9jb250YWN0cy1wYWdlLmNvbXBvbmVudC5zY3NzIiwid2VicGFjazovLy4vLi4vLi4vQW5ndWxhciUyMEludGVybWVkaW8vbmdSb3V0aW5nL3NyYy9hcHAvcGFnZXMvY29udGFjdHMtcGFnZS9jb250YWN0cy1wYWdlLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsZ0JBQUE7QUNDRjs7QURFQTtFQUNFLGVBQUE7RUFDQSxhQUFBO0FDQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIuY29udGFjdG97XG4gIGZvbnQtc2l6ZTogbGFyZ2U7XG59XG5cbi5jb250YWN0bzpob3ZlcntcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBjb2xvcjogdG9tYXRvO1xufVxuIiwiLmNvbnRhY3RvIHtcbiAgZm9udC1zaXplOiBsYXJnZTtcbn1cblxuLmNvbnRhY3RvOmhvdmVyIHtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBjb2xvcjogdG9tYXRvO1xufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;IAIAA,2BAA0D;IAEjCA,YAAoB;IAAAA,iBAAK;IAC9CA,iCAAuC;IAA/BA;MAAA;MAAA;MAAA;MAAA,OAASA,6CAAoB;IAAA,EAAC;IAACA,gDAAgC;IAAAA,iBAAS;;;;;IAF7EA,eAA4B;IAA5BA,sDAA4B;IAAAA,kFAA8C;IACxDA,eAAoB;IAApBA,kDAAoB;;;;;IAK7CA,6BAAiF;IAC/EA,yBAAG;IAAAA,YAA8C;IAAAA,iBAAI;IACvDA,0BAAe;;;;IADVA,eAA8C;IAA9CA,kFAA8C;;;;;IAIjDA,yBAAG;IAAAA,qDAAqC;IAAAA,iBAAI;;;ACJ9C,OAAM,MAAOC,qBAAqB;EAMhCC,YAAoBC,MAAc,EACdC,KAAqB;EAC7B;EACQC,iBAAoC;IAHpC,WAAM,GAANF,MAAM;IACN,UAAK,GAALC,KAAK;IAEL,sBAAiB,GAAjBC,iBAAiB;IAPrC,eAAU,GAAU,OAAO;IAC3B;IACA,wBAAmB,GAAmB,EAAE;EAOxC;EAEAC,QAAQ;IAIN;IACA,IAAI,CAACF,KAAK,CAACG,WAAW,CAACC,SAAS,CAAEC,MAAW,IAAI;MAC/CC,OAAO,CAACC,GAAG,CAAC,cAAc,EAACF,MAAM,CAACG,IAAI,CAAC;MACvC,IAAGH,MAAM,CAACG,IAAI,EAAC;QACX,IAAI,CAACC,UAAU,GAAEJ,MAAM,CAACG,IAAI;;MAEhC;MACK;;;;;MAMP;MACI,IAAI,CAACP,iBAAiB,CAACS,qBAAqB,CAAC,EAAE,CAAC,CAACN,SAAS,CACxD;QACEO,IAAI,EAAGC,QAAiB,IAAG;UACzBN,OAAO,CAACC,GAAG,CAACK,QAAQ,CAAC,EACrBA,QAAQ,CAACC,OAAO,CAACC,OAAO,CAAC,CAACC,aAA6B,EAAEC,KAAa,KAAI;YACxE,IAAI,CAACC,mBAAmB,CAACC,IAAI,CAACH,aAAa,CAAC;UAC9C,CAAC,CAAC;UACFT,OAAO,CAACC,GAAG,CAAC,IAAI,CAACU,mBAAmB,CAAC;QACvC,CAAC;QACDE,KAAK,EAAGA,KAAK,IAAGb,OAAO,CAACa,KAAK,CAAC,GAAGA,KAAK,EAAE,CAAC;QACzCC,QAAQ,EAAE,MAAKd,OAAO,CAACe,IAAI,CAAC,uCAAuC;OACpE,CACF;IAEL,CAAC,CAAC;EAIJ;EACA;EACAC,UAAU,CAACC,QAAwB;IAEjC,IAAIC,gBAAgB,GAAmB;MACrCC,KAAK,EAAE;QACLC,IAAI,EAAEH;;KAGT;IACD,IAAI,CAACxB,MAAM,CAAC4B,QAAQ,CAAC,CAAC,OAAO,CAAC,EAAEH,gBAAgB,CAAC;EACnD;;AA5DW3B,qBAAqB;mBAArBA,qBAAqB;AAAA;AAArBA,qBAAqB;QAArBA,qBAAqB;EAAA+B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDZlCpC,0BAAI;MAAAA,6BAAa;MAAAA,iBAAK;MAItBA,sEAKM;MAENA,wFAEe;MAEfA,uHAEc;MAEdA,4BAAsB;MAAAA,sBAAM;MAAAA,iBAAI;;;;MAfNA,eAAmB;MAAnBA,4CAAmB;MAO9BA,eAAmD;MAAnDA,8EAAmD","names":["i0","ContactsPageComponent","constructor","router","route","randomUserService","ngOnInit","queryParams","subscribe","params","console","log","sexo","filtroSexo","obtenerRandomContacts","next","response","results","forEach","randomContact","index","listaRandomContacts","push","error","complete","info","volverHome","contacto","navigationExtras","state","data","navigate","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\josan\\Desktop\\Angular Intermedio\\ngRouting\\src\\app\\pages\\contacts-page\\contacts-page.component.html","C:\\Users\\josan\\Desktop\\Angular Intermedio\\ngRouting\\src\\app\\pages\\contacts-page\\contacts-page.component.ts"],"sourcesContent":["<h1>Tus contactos</h1>\n\n<!-- Listar los contactos y poder navegar al pinchar en uno de ellos al detalle -->\n\n<div *ngFor=\"let contacto of listaContactos; let i=index\">\n  <div routerLink=\"{{contacto.id}}\"[state]=\"{data: contacto, filtro: filtroSexo}\">  <!--  También se puede incorporar detras de id}}\" ....-->\n    <h6 class=\"contacto\">{{contacto.nombre}} </h6>\n    <button (click)=\"volverHome(contacto)\">Seleccionar como amigo Invisible</button>\n  </div>\n</div>\n\n<ng-container *ngIf=\"filtroSexo== 'mujer' || filtroSexo=='hombre';else completo\">\n  <p>Mostrando lista filtrada por: \"{{filtroSexo}}\"</p>\n</ng-container>\n\n<ng-template #completo>\n  <p>Mostrando lista de contactos completa</p>\n</ng-template>\n\n<a routerLink=\"/home\">Volver</a>\n","import { NavigationExtras, Router, ActivatedRoute } from '@angular/router';\nimport { IContacto } from './../../models/contact.interface';\nimport { Component, OnInit } from '@angular/core';\nimport { ContactsService } from 'src/app/services/contacts.service';\nimport { RandomUserService } from 'src/app/services/random-user.service';\nimport { IRandomContact, Results } from 'src/app/models/randomuser';\n\n@Component({\n  selector: 'app-contacts-page',\n  templateUrl: './contacts-page.component.html',\n  styleUrls: ['./contacts-page.component.scss']\n})\nexport class ContactsPageComponent implements OnInit{\n\n  filtroSexo: string= 'todos';\n  //listaContactos: IContacto[]=[];\n  listaRandomContacts: IRandomContact[]=[];\n\n  constructor(private router: Router,\n              private route: ActivatedRoute,\n              //private contactService: ContactsService,\n              private randomUserService: RandomUserService){\n\n  }\n\n  ngOnInit(): void {\n\n\n\n    //Obtener los Query Params\n    this.route.queryParams.subscribe((params: any) =>{\n      console.log('QueryParams:',params.sexo)\n      if(params.sexo){\n          this.filtroSexo= params.sexo\n      }\n      //Obtener lista de contactos\n           /*this.contactService.obtenerContactos(this.filtroSexo).then(\n           (lista)=> this.listaContactos = lista)\n           .catch((error)=> console.error(`Ha habido un error al obtener los contactos: ${error}`))\n            .finally(()=> console.info('Petición de contactos terminada'))\n          */\n\n    //Implementación para obtener la lista de contactos aleatoria\n        this.randomUserService.obtenerRandomContacts(10).subscribe(\n          {\n            next: (response: Results)=>{\n              console.log(response),\n              response.results.forEach((randomContact: IRandomContact, index: number) =>{\n                this.listaRandomContacts.push(randomContact);\n              })\n              console.log(this.listaRandomContacts);\n            },\n            error: (error)=>console.error(`${error}`),\n            complete: () =>console.info('Petición de random contacts terminada')\n          }\n        );\n\n    });\n\n\n\n  }\n  //Ejemplo de paso de información entre componentes del ESTADO\n  volverHome(contacto: IRandomContact){\n\n    let navigationExtras: NavigationExtras={\n      state: {\n        data: contacto\n      }\n\n    }\n    this.router.navigate(['/home'], navigationExtras)\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}