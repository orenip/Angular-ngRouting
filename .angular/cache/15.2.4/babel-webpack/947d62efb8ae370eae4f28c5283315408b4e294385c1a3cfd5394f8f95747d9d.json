{"ast":null,"code":"import { Breakpoints } from '@angular/cdk/layout';\nimport { map, shareReplay } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/cdk/layout\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"@angular/material/toolbar\";\nimport * as i6 from \"@angular/material/sidenav\";\nimport * as i7 from \"@angular/material/icon\";\nimport * as i8 from \"@angular/material/list\";\nfunction NavComponent_button_17_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function NavComponent_button_17_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      i0.ɵɵnextContext();\n      const _r0 = i0.ɵɵreference(2);\n      return i0.ɵɵresetView(_r0.toggle());\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\", 8);\n    i0.ɵɵtext(2, \"menu\");\n    i0.ɵɵelementEnd()();\n  }\n}\nconst _c0 = function () {\n  return [\"/contacts\"];\n};\nexport class NavComponent {\n  constructor(breakpointObserver) {\n    this.breakpointObserver = breakpointObserver;\n    this.isHandset$ = this.breakpointObserver.observe(Breakpoints.Handset).pipe(map(result => result.matches), shareReplay());\n  }\n}\nNavComponent.ɵfac = function NavComponent_Factory(t) {\n  return new (t || NavComponent)(i0.ɵɵdirectiveInject(i1.BreakpointObserver));\n};\nNavComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: NavComponent,\n  selectors: [[\"app-nav\"]],\n  decls: 22,\n  vars: 14,\n  consts: [[1, \"sidenav-container\"], [\"fixedInViewport\", \"\", 1, \"sidenav\", 3, \"mode\", \"opened\"], [\"drawer\", \"\"], [\"mat-list-item\", \"\", 3, \"routerLink\"], [\"mat-list-item\", \"\", \"href\", \"#\"], [\"color\", \"primary\"], [\"type\", \"button\", \"aria-label\", \"Toggle sidenav\", \"mat-icon-button\", \"\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"button\", \"aria-label\", \"Toggle sidenav\", \"mat-icon-button\", \"\", 3, \"click\"], [\"aria-label\", \"Side nav toggle icon\"]],\n  template: function NavComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-sidenav-container\", 0)(1, \"mat-sidenav\", 1, 2);\n      i0.ɵɵpipe(3, \"async\");\n      i0.ɵɵpipe(4, \"async\");\n      i0.ɵɵpipe(5, \"async\");\n      i0.ɵɵelementStart(6, \"mat-toolbar\");\n      i0.ɵɵtext(7, \"Menu\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"mat-nav-list\")(9, \"a\", 3);\n      i0.ɵɵtext(10, \"Amigo Invisible\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"a\", 4);\n      i0.ɵɵtext(12, \"Tareas\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"a\", 4);\n      i0.ɵɵtext(14, \"Logout\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(15, \"mat-sidenav-content\")(16, \"mat-toolbar\", 5);\n      i0.ɵɵtemplate(17, NavComponent_button_17_Template, 3, 0, \"button\", 6);\n      i0.ɵɵpipe(18, \"async\");\n      i0.ɵɵelementStart(19, \"span\");\n      i0.ɵɵtext(20, \"ngRouting\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(21, \"router-outlet\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"mode\", i0.ɵɵpipeBind1(4, 7, ctx.isHandset$) ? \"over\" : \"side\")(\"opened\", i0.ɵɵpipeBind1(5, 9, ctx.isHandset$) === false);\n      i0.ɵɵattribute(\"role\", i0.ɵɵpipeBind1(3, 5, ctx.isHandset$) ? \"dialog\" : \"navigation\");\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(13, _c0));\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(18, 11, ctx.isHandset$));\n    }\n  },\n  dependencies: [i2.NgIf, i3.RouterOutlet, i3.RouterLink, i4.MatIconButton, i5.MatToolbar, i6.MatSidenav, i6.MatSidenavContainer, i6.MatSidenavContent, i7.MatIcon, i8.MatNavList, i8.MatListItem, i2.AsyncPipe],\n  styles: [\".sidenav-container[_ngcontent-%COMP%] {\\n  height: 100%;\\n}\\n\\n.sidenav[_ngcontent-%COMP%] {\\n  width: 200px;\\n}\\n\\n.sidenav[_ngcontent-%COMP%]   .mat-toolbar[_ngcontent-%COMP%] {\\n  background: inherit;\\n}\\n\\n.mat-toolbar.mat-primary[_ngcontent-%COMP%] {\\n  position: sticky;\\n  top: 0;\\n  z-index: 1;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9uYXYvbmF2LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsWUFBQTtBQUNGOztBQUVBO0VBQ0UsWUFBQTtBQUNGOztBQUVBO0VBQ0UsbUJBQUE7QUFDRjs7QUFFQTtFQUNFLGdCQUFBO0VBQ0EsTUFBQTtFQUNBLFVBQUE7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbIi5zaWRlbmF2LWNvbnRhaW5lciB7XG4gIGhlaWdodDogMTAwJTtcbn1cblxuLnNpZGVuYXYge1xuICB3aWR0aDogMjAwcHg7XG59XG5cbi5zaWRlbmF2IC5tYXQtdG9vbGJhciB7XG4gIGJhY2tncm91bmQ6IGluaGVyaXQ7XG59XG5cbi5tYXQtdG9vbGJhci5tYXQtcHJpbWFyeSB7XG4gIHBvc2l0aW9uOiBzdGlja3k7XG4gIHRvcDogMDtcbiAgei1pbmRleDogMTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"AACA,SAA6BA,WAAW,QAAQ,qBAAqB;AAErE,SAASC,GAAG,EAAEC,WAAW,QAAQ,gBAAgB;;;;;;;;;;;;;ICW3CC,iCAK6B;IAD3BA;MAAAA;MAAAA;MAAA;MAAA,OAASA,2BAAe;IAAA,EAAC;IAEzBA,mCAA4C;IAAAA,oBAAI;IAAAA,iBAAW;;;;;;ADVnE,OAAM,MAAOC,YAAY;EAQvBC,YAAoBC,kBAAsC;IAAtC,uBAAkB,GAAlBA,kBAAkB;IANtC,eAAU,GAAwB,IAAI,CAACA,kBAAkB,CAACC,OAAO,CAACP,WAAW,CAACQ,OAAO,CAAC,CACnFC,IAAI,CACHR,GAAG,CAACS,MAAM,IAAIA,MAAM,CAACC,OAAO,CAAC,EAC7BT,WAAW,EAAE,CACd;EAE0D;;AARlDE,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;QAAZA,YAAY;EAAAQ;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCVzBb,gDAAiD;;;;MAK7CA,mCAAa;MAAAA,oBAAI;MAAAA,iBAAc;MAC/BA,oCAAc;MACkCA,gCAAe;MAAAA,iBAAI;MACjEA,6BAA0B;MAAAA,uBAAM;MAAAA,iBAAI;MACpCA,6BAA0B;MAAAA,uBAAM;MAAAA,iBAAI;MAGxCA,4CAAqB;MAEjBA,qEAOS;;MACTA,6BAAM;MAAAA,0BAAS;MAAAA,iBAAO;MAGxBA,iCAA+B;MACjCA,iBAAsB;;;MAvBlBA,eAA+C;MAA/CA,6EAA+C;MAD/CA,sFAA4D;MAK3CA,eAA4B;MAA5BA,wDAA4B;MAY1CA,eAAwB;MAAxBA,6DAAwB","names":["Breakpoints","map","shareReplay","i0","NavComponent","constructor","breakpointObserver","observe","Handset","pipe","result","matches","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/home/practicas/Angular/ngRouting/src/app/components/nav/nav.component.ts","/home/practicas/Angular/ngRouting/src/app/components/nav/nav.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-nav',\n  templateUrl: './nav.component.html',\n  styleUrls: ['./nav.component.scss']\n})\nexport class NavComponent {\n\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\n    .pipe(\n      map(result => result.matches),\n      shareReplay()\n    );\n\n  constructor(private breakpointObserver: BreakpointObserver) {}\n\n}\n","<mat-sidenav-container class=\"sidenav-container\">\n  <mat-sidenav #drawer class=\"sidenav\" fixedInViewport\n      [attr.role]=\"(isHandset$ | async) ? 'dialog' : 'navigation'\"\n      [mode]=\"(isHandset$ | async) ? 'over' : 'side'\"\n      [opened]=\"(isHandset$ | async) === false\">\n    <mat-toolbar>Menu</mat-toolbar>\n    <mat-nav-list>\n      <a mat-list-item [routerLink]=\"['/contacts']\">Amigo Invisible</a>\n      <a mat-list-item href=\"#\">Tareas</a>\n      <a mat-list-item href=\"#\">Logout</a>\n    </mat-nav-list>\n  </mat-sidenav>\n  <mat-sidenav-content>\n    <mat-toolbar color=\"primary\">\n      <button\n        type=\"button\"\n        aria-label=\"Toggle sidenav\"\n        mat-icon-button\n        (click)=\"drawer.toggle()\"\n        *ngIf=\"isHandset$ | async\">\n        <mat-icon aria-label=\"Side nav toggle icon\">menu</mat-icon>\n      </button>\n      <span>ngRouting</span>\n    </mat-toolbar>\n    <!-- Add Content Here -->\n    <router-outlet></router-outlet>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}